{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":874,"byte_end":876,"line_start":38,"line_end":38,"column_start":44,"column_end":46,"is_primary":false,"text":[{"text":"    let sck  = gpioa.pa5.into_alternate_af0();","highlight_start":44,"highlight_end":46}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":856,"byte_end":874,"line_start":38,"line_end":38,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"    let sck  = gpioa.pa5.into_alternate_af0();","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7112,"byte_end":7130,"line_start":253,"line_end":253,"column_start":32,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af0(","highlight_start":32,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":1},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ]","highlight_start":1,"highlight_end":1},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":874,"byte_end":876,"line_start":38,"line_end":38,"column_start":44,"column_end":46,"is_primary":true,"text":[{"text":"    let sck  = gpioa.pa5.into_alternate_af0();","highlight_start":44,"highlight_end":46}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:38:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let sck  = gpioa.pa5.into_alternate_af0();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sck  = gpioa.pa5.into_alternate_af0(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":921,"byte_end":923,"line_start":39,"line_end":39,"column_start":44,"column_end":46,"is_primary":false,"text":[{"text":"    let miso = gpioa.pa6.into_alternate_af0();","highlight_start":44,"highlight_end":46}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":903,"byte_end":921,"line_start":39,"line_end":39,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"    let miso = gpioa.pa6.into_alternate_af0();","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7112,"byte_end":7130,"line_start":253,"line_end":253,"column_start":32,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af0(","highlight_start":32,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":921,"byte_end":923,"line_start":39,"line_end":39,"column_start":44,"column_end":46,"is_primary":true,"text":[{"text":"    let miso = gpioa.pa6.into_alternate_af0();","highlight_start":44,"highlight_end":46}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:39:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let miso = gpioa.pa6.into_alternate_af0();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let miso = gpioa.pa6.into_alternate_af0(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":968,"byte_end":970,"line_start":40,"line_end":40,"column_start":44,"column_end":46,"is_primary":false,"text":[{"text":"    let mosi = gpioa.pa7.into_alternate_af0();","highlight_start":44,"highlight_end":46}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":950,"byte_end":968,"line_start":40,"line_end":40,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"    let mosi = gpioa.pa7.into_alternate_af0();","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7112,"byte_end":7130,"line_start":253,"line_end":253,"column_start":32,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af0(","highlight_start":32,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":968,"byte_end":970,"line_start":40,"line_end":40,"column_start":44,"column_end":46,"is_primary":true,"text":[{"text":"    let mosi = gpioa.pa7.into_alternate_af0();","highlight_start":44,"highlight_end":46}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:40:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mosi = gpioa.pa7.into_alternate_af0();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mosi = gpioa.pa7.into_alternate_af0(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1202,"byte_end":1204,"line_start":51,"line_end":51,"column_start":47,"column_end":49,"is_primary":false,"text":[{"text":"    let _cs  = gpioa.pa4.into_push_pull_output();","highlight_start":47,"highlight_end":49}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1181,"byte_end":1202,"line_start":51,"line_end":51,"column_start":26,"column_end":47,"is_primary":true,"text":[{"text":"    let _cs  = gpioa.pa4.into_push_pull_output();","highlight_start":26,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":14619,"byte_end":14640,"line_start":405,"line_end":405,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"                        pub fn into_push_pull_output(","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1202,"byte_end":1204,"line_start":51,"line_end":51,"column_start":47,"column_end":49,"is_primary":true,"text":[{"text":"    let _cs  = gpioa.pa4.into_push_pull_output();","highlight_start":47,"highlight_end":49}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:51:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let _cs  = gpioa.pa4.into_push_pull_output();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let _cs  = gpioa.pa4.into_push_pull_output(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1274,"byte_end":1276,"line_start":52,"line_end":52,"column_start":69,"column_end":71,"is_primary":false,"text":[{"text":"    let dc: PB1<Output<PushPull>>  = gpiob.pb1.into_push_pull_output();","highlight_start":69,"highlight_end":71}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1253,"byte_end":1274,"line_start":52,"line_end":52,"column_start":48,"column_end":69,"is_primary":true,"text":[{"text":"    let dc: PB1<Output<PushPull>>  = gpiob.pb1.into_push_pull_output();","highlight_start":48,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":14619,"byte_end":14640,"line_start":405,"line_end":405,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"                        pub fn into_push_pull_output(","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1274,"byte_end":1276,"line_start":52,"line_end":52,"column_start":69,"column_end":71,"is_primary":true,"text":[{"text":"    let dc: PB1<Output<PushPull>>  = gpiob.pb1.into_push_pull_output();","highlight_start":69,"highlight_end":71}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:52:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let dc: PB1<Output<PushPull>>  = gpiob.pb1.into_push_pull_output();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let dc: PB1<Output<PushPull>>  = gpiob.pb1.into_push_pull_output(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1346,"byte_end":1348,"line_start":53,"line_end":53,"column_start":69,"column_end":71,"is_primary":false,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output();","highlight_start":69,"highlight_end":71}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1325,"byte_end":1346,"line_start":53,"line_end":53,"column_start":48,"column_end":69,"is_primary":true,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output();","highlight_start":48,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":14619,"byte_end":14640,"line_start":405,"line_end":405,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"                        pub fn into_push_pull_output(","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1346,"byte_end":1348,"line_start":53,"line_end":53,"column_start":69,"column_end":71,"is_primary":true,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output();","highlight_start":69,"highlight_end":71}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:53:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>: SpiDevice` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1503,"byte_end":1506,"line_start":59,"line_end":59,"column_start":32,"column_end":35,"is_primary":true,"text":[{"text":"    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);","highlight_start":32,"highlight_end":35}],"label":"the trait `embedded_hal::spi::SpiDevice` is not implemented for `Spi<SPI1, PA5<Alternate<AF0>>, PA6<Alternate<AF0>>, PA7<...>, ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1491,"byte_end":1502,"line_start":59,"line_end":59,"column_start":20,"column_end":31,"is_primary":false,"text":[{"text":"    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);","highlight_start":20,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/spi.rs","byte_start":14064,"byte_end":14121,"line_start":347,"line_end":347,"column_start":1,"column_end":58,"is_primary":true,"text":[{"text":"pub trait SpiDevice<Word: Copy + 'static = u8>: ErrorType {","highlight_start":1,"highlight_end":58}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs","byte_start":2197,"byte_end":2249,"line_start":89,"line_end":89,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {","highlight_start":1,"highlight_end":53}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735::<SPI, DC, RST>::new`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":1093,"byte_end":1096,"line_start":58,"line_end":58,"column_start":12,"column_end":15,"is_primary":false,"text":[{"text":"    pub fn new(","highlight_start":12,"highlight_end":15}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":963,"byte_end":977,"line_start":53,"line_end":53,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"    SPI: spi::SpiDevice,","highlight_start":10,"highlight_end":24}],"label":"required by this bound in `ST7735::<SPI, DC, RST>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-145690870080400360.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>: SpiDevice` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:59:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::spi::SpiDevice` is not implemented for `Spi<SPI1, PA5<Alternate<AF0>>, PA6<Alternate<AF0>>, PA7<...>, ...>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/spi.rs:347:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SpiDevice<Word: Copy + 'static = u8>: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735::<SPI, DC, RST>::new`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:53:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    SPI: spi::SpiDevice,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735::<SPI, DC, RST>::new`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-145690870080400360.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1508,"byte_end":1510,"line_start":59,"line_end":59,"column_start":37,"column_end":39,"is_primary":true,"text":[{"text":"    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);","highlight_start":37,"highlight_end":39}],"label":"the trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1491,"byte_end":1502,"line_start":59,"line_end":59,"column_start":20,"column_end":31,"is_primary":false,"text":[{"text":"    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);","highlight_start":20,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs","byte_start":2944,"byte_end":2974,"line_start":124,"line_end":124,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub trait OutputPin: ErrorType {","highlight_start":1,"highlight_end":31}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735::<SPI, DC, RST>::new`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":1093,"byte_end":1096,"line_start":58,"line_end":58,"column_start":12,"column_end":15,"is_primary":false,"text":[{"text":"    pub fn new(","highlight_start":12,"highlight_end":15}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":987,"byte_end":996,"line_start":54,"line_end":54,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    DC: OutputPin,","highlight_start":9,"highlight_end":18}],"label":"required by this bound in `ST7735::<SPI, DC, RST>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:59:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait OutputPin: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735::<SPI, DC, RST>::new`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:54:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DC: OutputPin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735::<SPI, DC, RST>::new`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1512,"byte_end":1515,"line_start":59,"line_end":59,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);","highlight_start":41,"highlight_end":44}],"label":"the trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1491,"byte_end":1502,"line_start":59,"line_end":59,"column_start":20,"column_end":31,"is_primary":false,"text":[{"text":"    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);","highlight_start":20,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs","byte_start":2944,"byte_end":2974,"line_start":124,"line_end":124,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub trait OutputPin: ErrorType {","highlight_start":1,"highlight_end":31}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735::<SPI, DC, RST>::new`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":1093,"byte_end":1096,"line_start":58,"line_end":58,"column_start":12,"column_end":15,"is_primary":false,"text":[{"text":"    pub fn new(","highlight_start":12,"highlight_end":15}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":1007,"byte_end":1016,"line_start":55,"line_end":55,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"    RST: OutputPin,","highlight_start":10,"highlight_end":19}],"label":"required by this bound in `ST7735::<SPI, DC, RST>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:59:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait OutputPin: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735::<SPI, DC, RST>::new`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:55:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    RST: OutputPin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735::<SPI, DC, RST>::new`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>: SpiDevice` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1491,"byte_end":1539,"line_start":59,"line_end":59,"column_start":20,"column_end":68,"is_primary":true,"text":[{"text":"    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);","highlight_start":20,"highlight_end":68}],"label":"the trait `embedded_hal::spi::SpiDevice` is not implemented for `Spi<SPI1, PA5<Alternate<AF0>>, PA6<Alternate<AF0>>, PA7<...>, ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/spi.rs","byte_start":14064,"byte_end":14121,"line_start":347,"line_end":347,"column_start":1,"column_end":58,"is_primary":true,"text":[{"text":"pub trait SpiDevice<Word: Copy + 'static = u8>: ErrorType {","highlight_start":1,"highlight_end":58}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs","byte_start":2197,"byte_end":2249,"line_start":89,"line_end":89,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {","highlight_start":1,"highlight_end":53}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":294,"byte_end":300,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct ST7735<SPI, DC, RST>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":330,"byte_end":344,"line_start":16,"line_end":16,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"    SPI: spi::SpiDevice,","highlight_start":10,"highlight_end":24}],"label":"required by this bound in `ST7735`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-145690870080400360.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>: SpiDevice` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:59:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::spi::SpiDevice` is not implemented for `Spi<SPI1, PA5<Alternate<AF0>>, PA6<Alternate<AF0>>, PA7<...>, ...>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/spi.rs:347:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SpiDevice<Word: Copy + 'static = u8>: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:16:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ST7735<SPI, DC, RST>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    SPI: spi::SpiDevice,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-145690870080400360.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1491,"byte_end":1539,"line_start":59,"line_end":59,"column_start":20,"column_end":68,"is_primary":true,"text":[{"text":"    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);","highlight_start":20,"highlight_end":68}],"label":"the trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs","byte_start":2944,"byte_end":2974,"line_start":124,"line_end":124,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub trait OutputPin: ErrorType {","highlight_start":1,"highlight_end":31}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":294,"byte_end":300,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct ST7735<SPI, DC, RST>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":354,"byte_end":363,"line_start":17,"line_end":17,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    DC: OutputPin,","highlight_start":9,"highlight_end":18}],"label":"required by this bound in `ST7735`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:59:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait OutputPin: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:17:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ST7735<SPI, DC, RST>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DC: OutputPin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1491,"byte_end":1539,"line_start":59,"line_end":59,"column_start":20,"column_end":68,"is_primary":true,"text":[{"text":"    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);","highlight_start":20,"highlight_end":68}],"label":"the trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs","byte_start":2944,"byte_end":2974,"line_start":124,"line_end":124,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub trait OutputPin: ErrorType {","highlight_start":1,"highlight_end":31}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":294,"byte_end":300,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct ST7735<SPI, DC, RST>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":374,"byte_end":383,"line_start":18,"line_end":18,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"    RST: OutputPin,","highlight_start":10,"highlight_end":19}],"label":"required by this bound in `ST7735`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:59:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut disp = ST7735::new(spi, dc, rst, true, false, 160, 128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait OutputPin: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:18:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ST7735<SPI, DC, RST>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    RST: OutputPin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `init` exists for struct `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1550,"byte_end":1554,"line_start":60,"line_end":60,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"    disp.init(&mut delay).unwrap();","highlight_start":10,"highlight_end":14}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"doesn't satisfy `_: OutputPin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs","byte_start":2197,"byte_end":2249,"line_start":89,"line_end":89,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {","highlight_start":1,"highlight_end":53}],"label":"doesn't satisfy `_: SpiDevice`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Spi<stm32f0xx_hal::pac::SPI1, stm32f0xx_hal::gpio::gpioa::PA5<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA6<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA7<Alternate<stm32f0xx_hal::gpio::AF0>>, EightBit>: embedded_hal::spi::SpiDevice`\n`stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin`\n`stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `init` exists for struct `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:60:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    disp.init(&mut delay).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: SpiDevice`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: OutputPin`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Spi<stm32f0xx_hal::pac::SPI1, stm32f0xx_hal::gpio::gpioa::PA5<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA6<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA7<Alternate<stm32f0xx_hal::gpio::AF0>>, EightBit>: embedded_hal::spi::SpiDevice`\u001b[0m\n\u001b[0m            `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin`\u001b[0m\n\u001b[0m            `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `set_orientation` exists for struct `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1586,"byte_end":1601,"line_start":61,"line_end":61,"column_start":10,"column_end":25,"is_primary":true,"text":[{"text":"    disp.set_orientation(&Orientation::Portrait).unwrap();","highlight_start":10,"highlight_end":25}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"doesn't satisfy `_: OutputPin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs","byte_start":2197,"byte_end":2249,"line_start":89,"line_end":89,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {","highlight_start":1,"highlight_end":53}],"label":"doesn't satisfy `_: SpiDevice`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Spi<stm32f0xx_hal::pac::SPI1, stm32f0xx_hal::gpio::gpioa::PA5<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA6<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA7<Alternate<stm32f0xx_hal::gpio::AF0>>, EightBit>: embedded_hal::spi::SpiDevice`\n`stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin`\n`stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `set_orientation` exists for struct `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:61:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    disp.set_orientation(&Orientation::Portrait).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: SpiDevice`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: OutputPin`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Spi<stm32f0xx_hal::pac::SPI1, stm32f0xx_hal::gpio::gpioa::PA5<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA6<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA7<Alternate<stm32f0xx_hal::gpio::AF0>>, EightBit>: embedded_hal::spi::SpiDevice`\u001b[0m\n\u001b[0m            `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin`\u001b[0m\n\u001b[0m            `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `clear` found for struct `ST7735` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1670,"byte_end":1675,"line_start":64,"line_end":64,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"    disp.clear(Rgb565::BLACK).unwrap();","highlight_start":10,"highlight_end":15}],"label":"method not found in `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `clear` found for struct `ST7735` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:64:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    disp.clear(Rgb565::BLACK).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `ST7735<Spi<SPI1, PA5<...>, ..., ..., ...>, ..., ...>: DrawTarget` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1852,"byte_end":1861,"line_start":69,"line_end":69,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"        .draw(&mut disp)","highlight_start":15,"highlight_end":24}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1847,"byte_end":1851,"line_start":69,"line_end":69,"column_start":10,"column_end":14,"is_primary":false,"text":[{"text":"        .draw(&mut disp)","highlight_start":10,"highlight_end":14}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `embedded_graphics::draw_target::DrawTarget` is not implemented for `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `embedded_graphics::draw_target::DrawTarget`:\n  Clipped<'_, T>\n  ColorConverted<'_, T, C>\n  Cropped<'_, T>\n  MockDisplay<C>\n  embedded_graphics::draw_target::Translated<'_, T>\n  mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Background<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\n  mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Both<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\n  mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Foreground<<T as embedded_graphics::draw_target::DrawTarget>::Color>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `embedded_graphics::Drawable::draw`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-graphics-core-0.3.3/src/drawable.rs","byte_start":3476,"byte_end":3480,"line_start":104,"line_end":104,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn draw<D>(&self, target: &mut D) -> Result<Self::Output, D::Error>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-graphics-core-0.3.3/src/drawable.rs","byte_start":3562,"byte_end":3593,"line_start":106,"line_end":106,"column_start":12,"column_end":43,"is_primary":true,"text":[{"text":"        D: DrawTarget<Color = Self::Color>;","highlight_start":12,"highlight_end":43}],"label":"required by this bound in `Drawable::draw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-15855456726319540903.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ST7735<Spi<SPI1, PA5<...>, ..., ..., ...>, ..., ...>: DrawTarget` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:69:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .draw(&mut disp)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `embedded_graphics::draw_target::DrawTarget` is not implemented for `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `embedded_graphics::draw_target::DrawTarget`:\u001b[0m\n\u001b[0m              Clipped<'_, T>\u001b[0m\n\u001b[0m              ColorConverted<'_, T, C>\u001b[0m\n\u001b[0m              Cropped<'_, T>\u001b[0m\n\u001b[0m              MockDisplay<C>\u001b[0m\n\u001b[0m              embedded_graphics::draw_target::Translated<'_, T>\u001b[0m\n\u001b[0m              mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Background<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\u001b[0m\n\u001b[0m              mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Both<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\u001b[0m\n\u001b[0m              mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Foreground<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `embedded_graphics::Drawable::draw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-graphics-core-0.3.3/src/drawable.rs:106:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn draw<D>(&self, target: &mut D) -> Result<Self::Output, D::Error>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        D: DrawTarget<Color = Self::Color>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Drawable::draw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-15855456726319540903.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>: SpiDevice` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1786,"byte_end":1862,"line_start":68,"line_end":69,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    Text::new(\"Hello Rust!\", Point::new(10, 30), style)","highlight_start":5,"highlight_end":56},{"text":"        .draw(&mut disp)","highlight_start":1,"highlight_end":25}],"label":"the trait `embedded_hal::spi::SpiDevice` is not implemented for `Spi<SPI1, PA5<Alternate<AF0>>, PA6<Alternate<AF0>>, PA7<...>, ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/spi.rs","byte_start":14064,"byte_end":14121,"line_start":347,"line_end":347,"column_start":1,"column_end":58,"is_primary":true,"text":[{"text":"pub trait SpiDevice<Word: Copy + 'static = u8>: ErrorType {","highlight_start":1,"highlight_end":58}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs","byte_start":2197,"byte_end":2249,"line_start":89,"line_end":89,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {","highlight_start":1,"highlight_end":53}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":294,"byte_end":300,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct ST7735<SPI, DC, RST>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":330,"byte_end":344,"line_start":16,"line_end":16,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"    SPI: spi::SpiDevice,","highlight_start":10,"highlight_end":24}],"label":"required by this bound in `ST7735`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-145690870080400360.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>: SpiDevice` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:68:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"Hello Rust!\", Point::new(10, 30), style)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .draw(&mut disp)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::spi::SpiDevice` is not implemented for `Spi<SPI1, PA5<Alternate<AF0>>, PA6<Alternate<AF0>>, PA7<...>, ...>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/spi.rs:347:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SpiDevice<Word: Copy + 'static = u8>: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:16:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ST7735<SPI, DC, RST>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    SPI: spi::SpiDevice,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-145690870080400360.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1786,"byte_end":1862,"line_start":68,"line_end":69,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    Text::new(\"Hello Rust!\", Point::new(10, 30), style)","highlight_start":5,"highlight_end":56},{"text":"        .draw(&mut disp)","highlight_start":1,"highlight_end":25}],"label":"the trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs","byte_start":2944,"byte_end":2974,"line_start":124,"line_end":124,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub trait OutputPin: ErrorType {","highlight_start":1,"highlight_end":31}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":294,"byte_end":300,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct ST7735<SPI, DC, RST>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":354,"byte_end":363,"line_start":17,"line_end":17,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    DC: OutputPin,","highlight_start":9,"highlight_end":18}],"label":"required by this bound in `ST7735`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:68:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"Hello Rust!\", Point::new(10, 30), style)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .draw(&mut disp)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait OutputPin: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:17:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ST7735<SPI, DC, RST>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DC: OutputPin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1786,"byte_end":1862,"line_start":68,"line_end":69,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    Text::new(\"Hello Rust!\", Point::new(10, 30), style)","highlight_start":5,"highlight_end":56},{"text":"        .draw(&mut disp)","highlight_start":1,"highlight_end":25}],"label":"the trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs","byte_start":2944,"byte_end":2974,"line_start":124,"line_end":124,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub trait OutputPin: ErrorType {","highlight_start":1,"highlight_end":31}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":294,"byte_end":300,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct ST7735<SPI, DC, RST>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":374,"byte_end":383,"line_start":18,"line_end":18,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"    RST: OutputPin,","highlight_start":10,"highlight_end":19}],"label":"required by this bound in `ST7735`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:68:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"Hello Rust!\", Point::new(10, 30), style)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .draw(&mut disp)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait OutputPin: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:18:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ST7735<SPI, DC, RST>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    RST: OutputPin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `ST7735<Spi<SPI1, PA5<...>, ..., ..., ...>, ..., ...>: DrawTarget` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1960,"byte_end":1969,"line_start":73,"line_end":73,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"        .draw(&mut disp)","highlight_start":15,"highlight_end":24}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1955,"byte_end":1959,"line_start":73,"line_end":73,"column_start":10,"column_end":14,"is_primary":false,"text":[{"text":"        .draw(&mut disp)","highlight_start":10,"highlight_end":14}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `embedded_graphics::draw_target::DrawTarget` is not implemented for `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `embedded_graphics::draw_target::DrawTarget`:\n  Clipped<'_, T>\n  ColorConverted<'_, T, C>\n  Cropped<'_, T>\n  MockDisplay<C>\n  embedded_graphics::draw_target::Translated<'_, T>\n  mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Background<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\n  mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Both<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\n  mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Foreground<<T as embedded_graphics::draw_target::DrawTarget>::Color>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `embedded_graphics::Drawable::draw`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-graphics-core-0.3.3/src/drawable.rs","byte_start":3476,"byte_end":3480,"line_start":104,"line_end":104,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn draw<D>(&self, target: &mut D) -> Result<Self::Output, D::Error>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-graphics-core-0.3.3/src/drawable.rs","byte_start":3562,"byte_end":3593,"line_start":106,"line_end":106,"column_start":12,"column_end":43,"is_primary":true,"text":[{"text":"        D: DrawTarget<Color = Self::Color>;","highlight_start":12,"highlight_end":43}],"label":"required by this bound in `Drawable::draw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-15855456726319540903.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ST7735<Spi<SPI1, PA5<...>, ..., ..., ...>, ..., ...>: DrawTarget` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:73:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .draw(&mut disp)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `embedded_graphics::draw_target::DrawTarget` is not implemented for `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `embedded_graphics::draw_target::DrawTarget`:\u001b[0m\n\u001b[0m              Clipped<'_, T>\u001b[0m\n\u001b[0m              ColorConverted<'_, T, C>\u001b[0m\n\u001b[0m              Cropped<'_, T>\u001b[0m\n\u001b[0m              MockDisplay<C>\u001b[0m\n\u001b[0m              embedded_graphics::draw_target::Translated<'_, T>\u001b[0m\n\u001b[0m              mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Background<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\u001b[0m\n\u001b[0m              mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Both<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\u001b[0m\n\u001b[0m              mono_font::draw_target::MonoFontDrawTarget<'_, T, mono_font::draw_target::Foreground<<T as embedded_graphics::draw_target::DrawTarget>::Color>>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `embedded_graphics::Drawable::draw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-graphics-core-0.3.3/src/drawable.rs:106:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn draw<D>(&self, target: &mut D) -> Result<Self::Output, D::Error>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        D: DrawTarget<Color = Self::Color>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Drawable::draw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-15855456726319540903.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>: SpiDevice` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1887,"byte_end":1970,"line_start":72,"line_end":73,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)","highlight_start":5,"highlight_end":63},{"text":"        .draw(&mut disp)","highlight_start":1,"highlight_end":25}],"label":"the trait `embedded_hal::spi::SpiDevice` is not implemented for `Spi<SPI1, PA5<Alternate<AF0>>, PA6<Alternate<AF0>>, PA7<...>, ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/spi.rs","byte_start":14064,"byte_end":14121,"line_start":347,"line_end":347,"column_start":1,"column_end":58,"is_primary":true,"text":[{"text":"pub trait SpiDevice<Word: Copy + 'static = u8>: ErrorType {","highlight_start":1,"highlight_end":58}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs","byte_start":2197,"byte_end":2249,"line_start":89,"line_end":89,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"pub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {","highlight_start":1,"highlight_end":53}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":294,"byte_end":300,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct ST7735<SPI, DC, RST>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":330,"byte_end":344,"line_start":16,"line_end":16,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"    SPI: spi::SpiDevice,","highlight_start":10,"highlight_end":24}],"label":"required by this bound in `ST7735`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-145690870080400360.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>: SpiDevice` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:72:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .draw(&mut disp)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::spi::SpiDevice` is not implemented for `Spi<SPI1, PA5<Alternate<AF0>>, PA6<Alternate<AF0>>, PA7<...>, ...>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/spi.rs:347:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SpiDevice<Word: Copy + 'static = u8>: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/spi.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Spi<SPI, SCKPIN, MISOPIN, MOSIPIN, WIDTH> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:16:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ST7735<SPI, DC, RST>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    SPI: spi::SpiDevice,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/tftst7735spi/target/thumbv6m-none-eabi/debug/deps/tftst7735spi-38e7951eb3e358a4.long-type-145690870080400360.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1887,"byte_end":1970,"line_start":72,"line_end":73,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)","highlight_start":5,"highlight_end":63},{"text":"        .draw(&mut disp)","highlight_start":1,"highlight_end":25}],"label":"the trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs","byte_start":2944,"byte_end":2974,"line_start":124,"line_end":124,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub trait OutputPin: ErrorType {","highlight_start":1,"highlight_end":31}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":294,"byte_end":300,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct ST7735<SPI, DC, RST>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":354,"byte_end":363,"line_start":17,"line_end":17,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    DC: OutputPin,","highlight_start":9,"highlight_end":18}],"label":"required by this bound in `ST7735`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:72:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .draw(&mut disp)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait OutputPin: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:17:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ST7735<SPI, DC, RST>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DC: OutputPin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1887,"byte_end":1970,"line_start":72,"line_end":73,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)","highlight_start":5,"highlight_end":63},{"text":"        .draw(&mut disp)","highlight_start":1,"highlight_end":25}],"label":"the trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `embedded_hal` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs","byte_start":2944,"byte_end":2974,"line_start":124,"line_end":124,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub trait OutputPin: ErrorType {","highlight_start":1,"highlight_end":31}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":223,"byte_end":233,"line_start":15,"line_end":15,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"use st7735_lcd::{Orientation, ST7735};","highlight_start":5,"highlight_end":15}],"label":"one version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":191,"byte_end":203,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"use embedded_hal::spi::MODE_0;","highlight_start":5,"highlight_end":17}],"label":"one version of crate `embedded_hal` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":6870,"byte_end":6965,"line_start":247,"line_end":249,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    pub struct $PXi<MODE> {","highlight_start":21,"highlight_end":44},{"text":"                        _mode: PhantomData<MODE>,","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs","byte_start":1533,"byte_end":1555,"line_start":39,"line_end":39,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"pub trait Channel<ADC> {","highlight_start":1,"highlight_end":23}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ST7735`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":294,"byte_end":300,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct ST7735<SPI, DC, RST>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs","byte_start":374,"byte_end":383,"line_start":18,"line_end":18,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"    RST: OutputPin,","highlight_start":10,"highlight_end":19}],"label":"required by this bound in `ST7735`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>: embedded_hal::digital::OutputPin` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:72:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .draw(&mut disp)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `embedded_hal::digital::OutputPin` is not implemented for `stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35membedded_hal\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/digital.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait OutputPin: ErrorType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse embedded_hal::spi::MODE_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse st7735_lcd::{Orientation, ST7735};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `embedded_hal` used here, as a dependency of crate `st7735_lcd`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/adc.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Channel<ADC> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ST7735`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/st7735-lcd-0.10.0/src/lib.rs:18:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ST7735<SPI, DC, RST>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    RST: OutputPin,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ST7735`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 23 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 23 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0277, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
