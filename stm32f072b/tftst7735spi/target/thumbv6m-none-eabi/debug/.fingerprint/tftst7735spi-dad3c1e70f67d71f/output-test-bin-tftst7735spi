{"$message_type":"diagnostic","message":"can't find crate for `test`","code":{"code":"E0463","explanation":"A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m: can't find crate for `test`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `embedded_graphics`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":268,"byte_end":285,"line_start":16,"line_end":16,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use embedded_graphics::{","highlight_start":5,"highlight_end":22}],"label":"use of unresolved module or unlinked crate `embedded_graphics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `embedded_graphics`, use `cargo add embedded_graphics` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `embedded_graphics`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_graphics::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `embedded_graphics`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `embedded_graphics`, use `cargo add embedded_graphics` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `embedded_graphics::mono_font::ascii::FONT_6X10`, `embedded_graphics::mono_font::MonoTextStyle`, `embedded_graphics::text::Text`, `embedded_graphics::pixelcolor::Rgb565`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":321,"byte_end":337,"line_start":18,"line_end":18,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"    mono_font::{ascii::FONT_6X10, MonoTextStyle},","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":339,"byte_end":352,"line_start":18,"line_end":18,"column_start":35,"column_end":48,"is_primary":true,"text":[{"text":"    mono_font::{ascii::FONT_6X10, MonoTextStyle},","highlight_start":35,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":359,"byte_end":369,"line_start":19,"line_end":19,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    text::Text,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":375,"byte_end":393,"line_start":20,"line_end":20,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    pixelcolor::Rgb565,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `embedded_graphics::mono_font::ascii::FONT_6X10`, `embedded_graphics::mono_font::MonoTextStyle`, `embedded_graphics::text::Text`, `embedded_graphics::pixelcolor::Rgb565`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:18:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mono_font::{ascii::FONT_6X10, MonoTextStyle},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    text::Text,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pixelcolor::Rgb565,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `moder` on type `stm32f0xx_hal::gpio::gpioa::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":851,"byte_end":856,"line_start":36,"line_end":36,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":56,"highlight_end":61}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `moder` on type `stm32f0xx_hal::gpio::gpioa::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:36:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `afrl` on type `stm32f0xx_hal::gpio::gpioa::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":869,"byte_end":873,"line_start":36,"line_end":36,"column_start":74,"column_end":78,"is_primary":true,"text":[{"text":"    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":74,"highlight_end":78}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `afrl` on type `stm32f0xx_hal::gpio::gpioa::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:36:74\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":858,"byte_end":873,"line_start":36,"line_end":36,"column_start":63,"column_end":78,"is_primary":false,"text":[{"text":"    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":63,"highlight_end":78}],"label":"unexpected argument #2","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":821,"byte_end":839,"line_start":36,"line_end":36,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7112,"byte_end":7130,"line_start":253,"line_end":253,"column_start":32,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af0(","highlight_start":32,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":1},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ]","highlight_start":1,"highlight_end":1},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":856,"byte_end":873,"line_start":36,"line_end":36,"column_start":61,"column_end":78,"is_primary":true,"text":[{"text":"    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":61,"highlight_end":78}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:36:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected argument #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder\u001b[0m\u001b[0m\u001b[38;5;9m, &mut gpioa.afrl\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let sck  = gpioa.pa5.into_alternate_af0(&mut gpioa.moder);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `moder` on type `stm32f0xx_hal::gpio::gpioa::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":931,"byte_end":936,"line_start":37,"line_end":37,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":56,"highlight_end":61}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `moder` on type `stm32f0xx_hal::gpio::gpioa::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:37:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `afrl` on type `stm32f0xx_hal::gpio::gpioa::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":949,"byte_end":953,"line_start":37,"line_end":37,"column_start":74,"column_end":78,"is_primary":true,"text":[{"text":"    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":74,"highlight_end":78}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `afrl` on type `stm32f0xx_hal::gpio::gpioa::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:37:74\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":938,"byte_end":953,"line_start":37,"line_end":37,"column_start":63,"column_end":78,"is_primary":false,"text":[{"text":"    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":63,"highlight_end":78}],"label":"unexpected argument #2","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":901,"byte_end":919,"line_start":37,"line_end":37,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7112,"byte_end":7130,"line_start":253,"line_end":253,"column_start":32,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af0(","highlight_start":32,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":936,"byte_end":953,"line_start":37,"line_end":37,"column_start":61,"column_end":78,"is_primary":true,"text":[{"text":"    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":61,"highlight_end":78}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:37:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected argument #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder\u001b[0m\u001b[0m\u001b[38;5;9m, &mut gpioa.afrl\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let miso = gpioa.pa6.into_alternate_af0(&mut gpioa.moder);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `moder` on type `stm32f0xx_hal::gpio::gpioa::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1011,"byte_end":1016,"line_start":38,"line_end":38,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":56,"highlight_end":61}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `moder` on type `stm32f0xx_hal::gpio::gpioa::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:38:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `afrl` on type `stm32f0xx_hal::gpio::gpioa::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1029,"byte_end":1033,"line_start":38,"line_end":38,"column_start":74,"column_end":78,"is_primary":true,"text":[{"text":"    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":74,"highlight_end":78}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `afrl` on type `stm32f0xx_hal::gpio::gpioa::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:38:74\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1018,"byte_end":1033,"line_start":38,"line_end":38,"column_start":63,"column_end":78,"is_primary":false,"text":[{"text":"    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":63,"highlight_end":78}],"label":"unexpected argument #2","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":981,"byte_end":999,"line_start":38,"line_end":38,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7112,"byte_end":7130,"line_start":253,"line_end":253,"column_start":32,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af0(","highlight_start":32,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1016,"byte_end":1033,"line_start":38,"line_end":38,"column_start":61,"column_end":78,"is_primary":true,"text":[{"text":"    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);","highlight_start":61,"highlight_end":78}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:38:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder, &mut gpioa.afrl);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected argument #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder\u001b[0m\u001b[0m\u001b[38;5;9m, &mut gpioa.afrl\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let mosi = gpioa.pa7.into_alternate_af0(&mut gpioa.moder);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `moder` on type `stm32f0xx_hal::gpio::gpioa::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1276,"byte_end":1281,"line_start":49,"line_end":49,"column_start":58,"column_end":63,"is_primary":true,"text":[{"text":"    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder, &mut gpioa.otyper);","highlight_start":58,"highlight_end":63}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `moder` on type `stm32f0xx_hal::gpio::gpioa::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:58\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder, &mut gpioa.otyper);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `otyper` on type `stm32f0xx_hal::gpio::gpioa::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1294,"byte_end":1300,"line_start":49,"line_end":49,"column_start":76,"column_end":82,"is_primary":true,"text":[{"text":"    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder, &mut gpioa.otyper);","highlight_start":76,"highlight_end":82}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `otyper` on type `stm32f0xx_hal::gpio::gpioa::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:76\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder, &mut gpioa.otyper);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pa0`, `pa1`, `pa2`, `pa3`, `pa4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1283,"byte_end":1300,"line_start":49,"line_end":49,"column_start":65,"column_end":82,"is_primary":false,"text":[{"text":"    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder, &mut gpioa.otyper);","highlight_start":65,"highlight_end":82}],"label":"unexpected argument #2","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1243,"byte_end":1264,"line_start":49,"line_end":49,"column_start":25,"column_end":46,"is_primary":true,"text":[{"text":"    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder, &mut gpioa.otyper);","highlight_start":25,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":14619,"byte_end":14640,"line_start":405,"line_end":405,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"                        pub fn into_push_pull_output(","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1281,"byte_end":1300,"line_start":49,"line_end":49,"column_start":63,"column_end":82,"is_primary":true,"text":[{"text":"    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder, &mut gpioa.otyper);","highlight_start":63,"highlight_end":82}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder, &mut gpioa.otyper);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected argument #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder\u001b[0m\u001b[0m\u001b[38;5;9m, &mut gpioa.otyper\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let cs  = gpioa.pa4.into_push_pull_output(&mut gpioa.moder);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `moder` on type `stm32f0xx_hal::gpio::gpiob::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1382,"byte_end":1387,"line_start":50,"line_end":50,"column_start":80,"column_end":85,"is_primary":true,"text":[{"text":"    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":80,"highlight_end":85}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pb0`, `pb1`, `pb2`, `pb3`, `pb4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `moder` on type `stm32f0xx_hal::gpio::gpiob::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:50:80\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pb0`, `pb1`, `pb2`, `pb3`, `pb4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `otyper` on type `stm32f0xx_hal::gpio::gpiob::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1400,"byte_end":1406,"line_start":50,"line_end":50,"column_start":98,"column_end":104,"is_primary":true,"text":[{"text":"    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":98,"highlight_end":104}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pb0`, `pb1`, `pb2`, `pb3`, `pb4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `otyper` on type `stm32f0xx_hal::gpio::gpiob::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:50:98\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pb0`, `pb1`, `pb2`, `pb3`, `pb4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1389,"byte_end":1406,"line_start":50,"line_end":50,"column_start":87,"column_end":104,"is_primary":false,"text":[{"text":"    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":87,"highlight_end":104}],"label":"unexpected argument #2","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1349,"byte_end":1370,"line_start":50,"line_end":50,"column_start":47,"column_end":68,"is_primary":true,"text":[{"text":"    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":47,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":14619,"byte_end":14640,"line_start":405,"line_end":405,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"                        pub fn into_push_pull_output(","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1387,"byte_end":1406,"line_start":50,"line_end":50,"column_start":85,"column_end":104,"is_primary":true,"text":[{"text":"    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":85,"highlight_end":104}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:50:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected argument #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder\u001b[0m\u001b[0m\u001b[38;5;9m, &mut gpiob.otyper\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(&mut gpiob.moder);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `moder` on type `stm32f0xx_hal::gpio::gpiob::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1489,"byte_end":1494,"line_start":51,"line_end":51,"column_start":81,"column_end":86,"is_primary":true,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":81,"highlight_end":86}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pb0`, `pb1`, `pb2`, `pb3`, `pb4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `moder` on type `stm32f0xx_hal::gpio::gpiob::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:51:81\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pb0`, `pb1`, `pb2`, `pb3`, `pb4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `otyper` on type `stm32f0xx_hal::gpio::gpiob::Parts`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1507,"byte_end":1513,"line_start":51,"line_end":51,"column_start":99,"column_end":105,"is_primary":true,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":99,"highlight_end":105}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `pb0`, `pb1`, `pb2`, `pb3`, `pb4` ... and 11 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `otyper` on type `stm32f0xx_hal::gpio::gpiob::Parts`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:51:99\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `pb0`, `pb1`, `pb2`, `pb3`, `pb4` ... and 11 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1496,"byte_end":1513,"line_start":51,"line_end":51,"column_start":88,"column_end":105,"is_primary":false,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":88,"highlight_end":105}],"label":"unexpected argument #2","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1456,"byte_end":1477,"line_start":51,"line_end":51,"column_start":48,"column_end":69,"is_primary":true,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":48,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":14619,"byte_end":14640,"line_start":405,"line_end":405,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"                        pub fn into_push_pull_output(","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1494,"byte_end":1513,"line_start":51,"line_end":51,"column_start":86,"column_end":105,"is_primary":true,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);","highlight_start":86,"highlight_end":105}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:51:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder, &mut gpiob.otyper);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected argument #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder\u001b[0m\u001b[0m\u001b[38;5;9m, &mut gpiob.otyper\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(&mut gpiob.moder);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `clear` found for struct `ST7735` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1826,"byte_end":1831,"line_start":62,"line_end":62,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"    disp.clear(Rgb565::BLACK).unwrap();","highlight_start":10,"highlight_end":15}],"label":"method not found in `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-graphics-core-0.3.3/src/draw_target/mod.rs","byte_start":16847,"byte_end":16852,"line_start":422,"line_end":422,"column_start":8,"column_end":13,"is_primary":false,"text":[{"text":"    fn clear(&mut self, color: Self::Color) -> Result<(), Self::Error> {","highlight_start":8,"highlight_end":13}],"label":"the method is available for `ST7735<Spi<stm32f0xx_hal::pac::SPI1, stm32f0xx_hal::gpio::gpioa::PA5<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA6<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA7<Alternate<stm32f0xx_hal::gpio::AF0>>, EightBit>, stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>, stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait `DrawTarget` which provides `clear` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":24,"byte_end":24,"line_start":4,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use cortex_m_rt::entry;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_graphics_core::draw_target::DrawTarget;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `clear` found for struct `ST7735` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:62:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    disp.clear(Rgb565::BLACK).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `ST7735<Spi<SPI1, PA5<Alternate<AF0>>, PA6<...>, ..., ...>, ..., ...>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-graphics-core-0.3.3/src/draw_target/mod.rs:422:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn clear(&mut self, color: Self::Color) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `ST7735<Spi<stm32f0xx_hal::pac::SPI1, stm32f0xx_hal::gpio::gpioa::PA5<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA6<Alternate<stm32f0xx_hal::gpio::AF0>>, stm32f0xx_hal::gpio::gpioa::PA7<Alternate<stm32f0xx_hal::gpio::AF0>>, EightBit>, stm32f0xx_hal::gpio::gpiob::PB1<Output<PushPull>>, stm32f0xx_hal::gpio::gpiob::PB0<Output<PushPull>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `DrawTarget` which provides `clear` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_graphics_core::draw_target::DrawTarget;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `Point`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1967,"byte_end":1972,"line_start":66,"line_end":66,"column_start":30,"column_end":35,"is_primary":true,"text":[{"text":"    Text::new(\"Hello Rust!\", Point::new(10, 30), style)","highlight_start":30,"highlight_end":35}],"label":"use of undeclared type `Point`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `Point`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:66:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"Hello Rust!\", Point::new(10, 30), style)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `Point`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `Point`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2075,"byte_end":2080,"line_start":70,"line_end":70,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)","highlight_start":37,"highlight_end":42}],"label":"use of undeclared type `Point`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `Point`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:70:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `Point`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 24 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 24 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0432, E0433, E0463, E0599, E0609.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0432, E0433, E0463, E0599, E0609.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
