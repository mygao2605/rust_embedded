{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `embedded_graphics`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":207,"byte_end":224,"line_start":14,"line_end":14,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use embedded_graphics::{","highlight_start":5,"highlight_end":22}],"label":"use of unresolved module or unlinked crate `embedded_graphics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `embedded_graphics`, use `cargo add embedded_graphics` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `embedded_graphics`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_graphics::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `embedded_graphics`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `embedded_graphics`, use `cargo add embedded_graphics` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `embedded_graphics::mono_font::ascii::FONT_6X10`, `embedded_graphics::mono_font::MonoTextStyle`, `embedded_graphics::text::Text`, `embedded_graphics::pixelcolor::Rgb565`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":260,"byte_end":276,"line_start":16,"line_end":16,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"    mono_font::{ascii::FONT_6X10, MonoTextStyle},","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":278,"byte_end":291,"line_start":16,"line_end":16,"column_start":35,"column_end":48,"is_primary":true,"text":[{"text":"    mono_font::{ascii::FONT_6X10, MonoTextStyle},","highlight_start":35,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":298,"byte_end":308,"line_start":17,"line_end":17,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    text::Text,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":314,"byte_end":332,"line_start":18,"line_end":18,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    pixelcolor::Rgb565,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `embedded_graphics::mono_font::ascii::FONT_6X10`, `embedded_graphics::mono_font::MonoTextStyle`, `embedded_graphics::text::Text`, `embedded_graphics::pixelcolor::Rgb565`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mono_font::{ascii::FONT_6X10, MonoTextStyle},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    text::Text,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pixelcolor::Rgb565,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `SPI_MODE` in crate `st7735_lcd`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":924,"byte_end":932,"line_start":40,"line_end":40,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"        st7735_lcd::SPI_MODE,   // mode chuẩn cho ST7735","highlight_start":21,"highlight_end":29}],"label":"not found in `st7735_lcd`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `SPI_MODE` in crate `st7735_lcd`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:40:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        st7735_lcd::SPI_MODE,   // mode chuẩn cho ST7735\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `st7735_lcd`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected value, found crate `core`","code":{"code":"E0423","explanation":"An identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nErroneous code example:\n\n```compile_fail,E0423\nstruct Foo { a: bool };\n\nlet f = Foo();\n// error: expected function, tuple struct or tuple variant, found `Foo`\n// `Foo` is a struct name, but this expression uses it like a function name\n```\n\nPlease verify you didn't misspell the name of what you actually wanted to use\nhere. Example:\n\n```\nfn Foo() -> u32 { 0 }\n\nlet f = Foo(); // ok!\n```\n\nIt is common to forget the trailing `!` on macro invocations, which would also\nyield this error:\n\n```compile_fail,E0423\nprintln(\"\");\n// error: expected function, tuple struct or tuple variant,\n// found macro `println`\n// did you mean `println!(...)`? (notice the trailing `!`)\n```\n\nAnother case where this error is emitted is when a value is expected, but\nsomething else is found:\n\n```compile_fail,E0423\npub mod a {\n    pub const I: i32 = 1;\n}\n\nfn h1() -> i32 {\n    a.I\n    //~^ ERROR expected value, found module `a`\n    // did you mean `a::I`?\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1265,"byte_end":1269,"line_start":50,"line_end":50,"column_start":49,"column_end":53,"is_primary":true,"text":[{"text":"    let mut delay = cortex_m::delay::Delay::new(core.SYST, rcc.clocks);","highlight_start":49,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use the path separator to refer to an item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1269,"byte_end":1270,"line_start":50,"line_end":50,"column_start":53,"column_end":54,"is_primary":true,"text":[{"text":"    let mut delay = cortex_m::delay::Delay::new(core.SYST, rcc.clocks);","highlight_start":53,"highlight_end":54}],"label":null,"suggested_replacement":"::","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0423]\u001b[0m\u001b[0m\u001b[1m: expected value, found crate `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:50:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut delay = cortex_m::delay::Delay::new(core.SYST, rcc.clocks);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the path separator to refer to an item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let mut delay = cortex_m::delay::Delay::new(core\u001b[0m\u001b[0m\u001b[38;5;9m.\u001b[0m\u001b[0mSYST, rcc.clocks);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let mut delay = cortex_m::delay::Delay::new(core\u001b[0m\u001b[0m\u001b[38;5;10m::\u001b[0m\u001b[0mSYST, rcc.clocks);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unwinding panics are not supported without std","code":null,"level":"error","spans":[],"children":[{"message":"using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unwinding panics are not supported without std\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `into_alternate` found for struct `stm32f0xx_hal::gpio::gpioa::PA5` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":698,"byte_end":712,"line_start":33,"line_end":33,"column_start":25,"column_end":39,"is_primary":true,"text":[{"text":"    let sck = gpioa.pa5.into_alternate();","highlight_start":25,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a method `into_alternate_af0` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7105,"byte_end":7237,"line_start":253,"line_end":255,"column_start":25,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af0(","highlight_start":25,"highlight_end":51},{"text":"                            self, _cs: &CriticalSection","highlight_start":1,"highlight_end":56},{"text":"                        ) -> $PXi<Alternate<AF0>> {","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":1},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ]","highlight_start":1,"highlight_end":1},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `into_alternate` found for struct `stm32f0xx_hal::gpio::gpioa::PA5` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:33:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let sck = gpioa.pa5.into_alternate();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `into_alternate_af0` with a similar name, but with different arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `into_alternate` found for struct `stm32f0xx_hal::gpio::gpioa::PA6` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":741,"byte_end":755,"line_start":34,"line_end":34,"column_start":26,"column_end":40,"is_primary":true,"text":[{"text":"    let miso = gpioa.pa6.into_alternate(); // nếu không dùng thì bỏ","highlight_start":26,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a method `into_alternate_af0` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7105,"byte_end":7237,"line_start":253,"line_end":255,"column_start":25,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af0(","highlight_start":25,"highlight_end":51},{"text":"                            self, _cs: &CriticalSection","highlight_start":1,"highlight_end":56},{"text":"                        ) -> $PXi<Alternate<AF0>> {","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `into_alternate` found for struct `stm32f0xx_hal::gpio::gpioa::PA6` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:34:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let miso = gpioa.pa6.into_alternate(); // nếu không dùng thì bỏ\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `into_alternate_af0` with a similar name, but with different arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `into_alternate` found for struct `stm32f0xx_hal::gpio::gpioa::PA7` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":816,"byte_end":830,"line_start":35,"line_end":35,"column_start":26,"column_end":40,"is_primary":true,"text":[{"text":"    let mosi = gpioa.pa7.into_alternate();","highlight_start":26,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a method `into_alternate_af0` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7105,"byte_end":7237,"line_start":253,"line_end":255,"column_start":25,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af0(","highlight_start":25,"highlight_end":51},{"text":"                            self, _cs: &CriticalSection","highlight_start":1,"highlight_end":56},{"text":"                        ) -> $PXi<Alternate<AF0>> {","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `into_alternate` found for struct `stm32f0xx_hal::gpio::gpioa::PA7` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:35:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mosi = gpioa.pa7.into_alternate();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `into_alternate_af0` with a similar name, but with different arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1069,"byte_end":1071,"line_start":46,"line_end":46,"column_start":45,"column_end":47,"is_primary":false,"text":[{"text":"    let cs = gpioa.pa4.into_push_pull_output();","highlight_start":45,"highlight_end":47}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1048,"byte_end":1069,"line_start":46,"line_end":46,"column_start":24,"column_end":45,"is_primary":true,"text":[{"text":"    let cs = gpioa.pa4.into_push_pull_output();","highlight_start":24,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":14619,"byte_end":14640,"line_start":405,"line_end":405,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"                        pub fn into_push_pull_output(","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1069,"byte_end":1071,"line_start":46,"line_end":46,"column_start":45,"column_end":47,"is_primary":true,"text":[{"text":"    let cs = gpioa.pa4.into_push_pull_output();","highlight_start":45,"highlight_end":47}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:46:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cs = gpioa.pa4.into_push_pull_output();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let cs = gpioa.pa4.into_push_pull_output(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1140,"byte_end":1142,"line_start":47,"line_end":47,"column_start":68,"column_end":70,"is_primary":false,"text":[{"text":"    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output();","highlight_start":68,"highlight_end":70}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1119,"byte_end":1140,"line_start":47,"line_end":47,"column_start":47,"column_end":68,"is_primary":true,"text":[{"text":"    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output();","highlight_start":47,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":14619,"byte_end":14640,"line_start":405,"line_end":405,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"                        pub fn into_push_pull_output(","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1140,"byte_end":1142,"line_start":47,"line_end":47,"column_start":68,"column_end":70,"is_primary":true,"text":[{"text":"    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output();","highlight_start":68,"highlight_end":70}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:47:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let dc: PB1<Output<PushPull>> = gpiob.pb1.into_push_pull_output(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1212,"byte_end":1214,"line_start":48,"line_end":48,"column_start":69,"column_end":71,"is_primary":false,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output();","highlight_start":69,"highlight_end":71}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1191,"byte_end":1212,"line_start":48,"line_end":48,"column_start":48,"column_end":69,"is_primary":true,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output();","highlight_start":48,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":14619,"byte_end":14640,"line_start":405,"line_end":405,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"                        pub fn into_push_pull_output(","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1212,"byte_end":1214,"line_start":48,"line_end":48,"column_start":69,"column_end":71,"is_primary":true,"text":[{"text":"    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output();","highlight_start":69,"highlight_end":71}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:48:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let rst: PB0<Output<PushPull>> = gpiob.pb0.into_push_pull_output(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1276,"byte_end":1286,"line_start":50,"line_end":50,"column_start":60,"column_end":70,"is_primary":true,"text":[{"text":"    let mut delay = cortex_m::delay::Delay::new(core.SYST, rcc.clocks);","highlight_start":60,"highlight_end":70}],"label":"expected `u32`, found `Clocks`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1237,"byte_end":1264,"line_start":50,"line_end":50,"column_start":21,"column_end":48,"is_primary":false,"text":[{"text":"    let mut delay = cortex_m::delay::Delay::new(core.SYST, rcc.clocks);","highlight_start":21,"highlight_end":48}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/delay.rs","byte_start":426,"byte_end":429,"line_start":17,"line_end":17,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(syst: SYST, ahb_frequency: u32) -> Self {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:50:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut delay = cortex_m::delay::Delay::new(core.SYST, rcc.clocks);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `u32`, found `Clocks`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/delay.rs:17:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(syst: SYST, ahb_frequency: u32) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `Point`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1669,"byte_end":1674,"line_start":62,"line_end":62,"column_start":30,"column_end":35,"is_primary":true,"text":[{"text":"    Text::new(\"Hello Rust!\", Point::new(10, 30), style)","highlight_start":30,"highlight_end":35}],"label":"use of undeclared type `Point`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `Point`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:62:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"Hello Rust!\", Point::new(10, 30), style)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `Point`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `Point`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1777,"byte_end":1782,"line_start":66,"line_end":66,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)","highlight_start":37,"highlight_end":42}],"label":"use of undeclared type `Point`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `Point`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:66:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Text::new(\"STM32F072 + ST7735\", Point::new(10, 50), style)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `Point`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 14 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 14 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0308, E0423, E0425, E0432, E0433, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0308, E0423, E0425, E0432, E0433, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
