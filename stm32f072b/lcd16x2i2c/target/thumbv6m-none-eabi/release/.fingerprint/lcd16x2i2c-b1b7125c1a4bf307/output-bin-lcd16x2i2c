{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":588,"byte_end":590,"line_start":27,"line_end":27,"column_start":42,"column_end":44,"is_primary":false,"text":[{"text":"    let scl = gpio.pb6.into_alternate_af1().set_open_drain();","highlight_start":42,"highlight_end":44}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":570,"byte_end":588,"line_start":27,"line_end":27,"column_start":24,"column_end":42,"is_primary":true,"text":[{"text":"    let scl = gpio.pb6.into_alternate_af1().set_open_drain();","highlight_start":24,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7480,"byte_end":7498,"line_start":261,"line_end":261,"column_start":32,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af1(","highlight_start":32,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":1},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ],","highlight_start":1,"highlight_end":1},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":1},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":1},{"text":"    ) => [","highlight_start":1,"highlight_end":1},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":1},{"text":"    ]","highlight_start":1,"highlight_end":1},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":588,"byte_end":590,"line_start":27,"line_end":27,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"    let scl = gpio.pb6.into_alternate_af1().set_open_drain();","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:27:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let scl = gpio.pb6.into_alternate_af1().set_open_drain();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let scl = gpio.pb6.into_alternate_af1(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m).set_open_drain();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":605,"byte_end":607,"line_start":27,"line_end":27,"column_start":59,"column_end":61,"is_primary":false,"text":[{"text":"    let scl = gpio.pb6.into_alternate_af1().set_open_drain();","highlight_start":59,"highlight_end":61}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":591,"byte_end":605,"line_start":27,"line_end":27,"column_start":45,"column_end":59,"is_primary":true,"text":[{"text":"    let scl = gpio.pb6.into_alternate_af1().set_open_drain();","highlight_start":45,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":18443,"byte_end":18457,"line_start":480,"line_end":480,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"                        pub fn set_open_drain(self, _cs: &CriticalSection) -> Self {","highlight_start":32,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":605,"byte_end":607,"line_start":27,"line_end":27,"column_start":59,"column_end":61,"is_primary":true,"text":[{"text":"    let scl = gpio.pb6.into_alternate_af1().set_open_drain();","highlight_start":59,"highlight_end":61}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:27:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let scl = gpio.pb6.into_alternate_af1().set_open_drain();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let scl = gpio.pb6.into_alternate_af1().set_open_drain(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":650,"byte_end":652,"line_start":28,"line_end":28,"column_start":42,"column_end":44,"is_primary":false,"text":[{"text":"    let sda = gpio.pb7.into_alternate_af1().set_open_drain();","highlight_start":42,"highlight_end":44}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":632,"byte_end":650,"line_start":28,"line_end":28,"column_start":24,"column_end":42,"is_primary":true,"text":[{"text":"    let sda = gpio.pb7.into_alternate_af1().set_open_drain();","highlight_start":24,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":7480,"byte_end":7498,"line_start":261,"line_end":261,"column_start":32,"column_end":50,"is_primary":true,"text":[{"text":"                        pub fn into_alternate_af1(","highlight_start":32,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":650,"byte_end":652,"line_start":28,"line_end":28,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"    let sda = gpio.pb7.into_alternate_af1().set_open_drain();","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:28:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let sda = gpio.pb7.into_alternate_af1().set_open_drain();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sda = gpio.pb7.into_alternate_af1(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m).set_open_drain();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":667,"byte_end":669,"line_start":28,"line_end":28,"column_start":59,"column_end":61,"is_primary":false,"text":[{"text":"    let sda = gpio.pb7.into_alternate_af1().set_open_drain();","highlight_start":59,"highlight_end":61}],"label":"argument #1 of type `&CriticalSection` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":653,"byte_end":667,"line_start":28,"line_end":28,"column_start":45,"column_end":59,"is_primary":true,"text":[{"text":"    let sda = gpio.pb7.into_alternate_af1().set_open_drain();","highlight_start":45,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":18443,"byte_end":18457,"line_start":480,"line_end":480,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"                        pub fn set_open_drain(self, _cs: &CriticalSection) -> Self {","highlight_start":32,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":22224,"byte_end":28623,"line_start":573,"line_end":761,"column_start":1,"column_end":7,"is_primary":false,"text":[{"text":"gpio!([","highlight_start":1,"highlight_end":8},{"text":"    GPIOA, gpioa, iopaen, PA, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PA0: (pa0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA1: (pa1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA2: (pa2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA3: (pa3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA4: (pa4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA5: (pa5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA6: (pa6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA7: (pa7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA8: (pa8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA9: (pa9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PA10: (pa10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA11: (pa11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA12: (pa12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA13: (pa13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA14: (pa14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PA15: (pa15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOB, gpiob, iopben, PB, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"device-selected\"","highlight_start":1,"highlight_end":36},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PB0: (pb0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB1: (pb1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB2: (pb2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB3: (pb3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB4: (pb4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB5: (pb5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB6: (pb6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB7: (pb7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB8: (pb8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB9: (pb9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PB10: (pb10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB11: (pb11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB12: (pb12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB13: (pb13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB14: (pb14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PB15: (pb15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOC, gpioc, iopcen, PC, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PC0: (pc0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC1: (pc1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC2: (pc2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC3: (pc3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC4: (pc4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC5: (pc5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC6: (pc6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC7: (pc7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC8: (pc8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC9: (pc9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PC10: (pc10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC11: (pc11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC12: (pc12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC13: (pc13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC14: (pc14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PC15: (pc15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOD, gpiod, iopden, PD, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PD0: (pd0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD1: (pd1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD2: (pd2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD3: (pd3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD4: (pd4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD5: (pd5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD6: (pd6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD7: (pd7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD8: (pd8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD9: (pd9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PD10: (pd10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD11: (pd11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD12: (pd12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD13: (pd13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD14: (pd14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PD15: (pd15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOE, gpioe, iopeen, PE, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PE0: (pe0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE1: (pe1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE2: (pe2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE3: (pe3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE4: (pe4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE5: (pe5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE6: (pe6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE7: (pe7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE8: (pe8, 8, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE9: (pe9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PE10: (pe10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE11: (pe11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE12: (pe12, 12, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE13: (pe13, 13, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE14: (pe14, 14, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"        PE15: (pe15, 15, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030x4\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x6\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f030x8\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f051\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f058\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF4: (pf4, 4, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF5: (pf5, 5, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f030xc\",","highlight_start":1,"highlight_end":33},{"text":"        feature = \"stm32f070\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f031\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f038\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF7: (pf7, 7, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f042\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f048\"","highlight_start":1,"highlight_end":30},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF11: (pf11, 11, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ],","highlight_start":1,"highlight_end":7},{"text":"    GPIOF, gpiof, iopfen, PF, any(","highlight_start":1,"highlight_end":35},{"text":"        feature = \"stm32f071\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f072\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f078\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f091\",","highlight_start":1,"highlight_end":31},{"text":"        feature = \"stm32f098\",","highlight_start":1,"highlight_end":31},{"text":"    ) => [","highlight_start":1,"highlight_end":11},{"text":"        PF0: (pf0, 0, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF1: (pf1, 1, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF2: (pf2, 2, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF3: (pf3, 3, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF6: (pf6, 6, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF9: (pf9, 9, Input<Floating>),","highlight_start":1,"highlight_end":40},{"text":"        PF10: (pf10, 10, Input<Floating>),","highlight_start":1,"highlight_end":43},{"text":"    ]","highlight_start":1,"highlight_end":6},{"text":"    ]);","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"gpio!","def_site_span":{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs","byte_start":4283,"byte_end":4300,"line_start":176,"line_end":176,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! gpio {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":667,"byte_end":669,"line_start":28,"line_end":28,"column_start":59,"column_end":61,"is_primary":true,"text":[{"text":"    let sda = gpio.pb7.into_alternate_af1().set_open_drain();","highlight_start":59,"highlight_end":61}],"label":null,"suggested_replacement":"(/* &CriticalSection */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:28:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let sda = gpio.pb7.into_alternate_af1().set_open_drain();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #1 of type `&CriticalSection` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f0xx-hal-0.18.0/src/gpio.rs:573:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgpio!([\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    GPIOA, gpioa, iopaen, PA, any(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"device-selected\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) => [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `gpio` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sda = gpio.pb7.into_alternate_af1().set_open_drain(\u001b[0m\u001b[0m\u001b[38;5;10m/* &CriticalSection */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, ...>>: _embedded_hal_blocking_i2c_Write` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":890,"byte_end":912,"line_start":39,"line_end":39,"column_start":36,"column_end":58,"is_primary":true,"text":[{"text":"    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), &mut delay)","highlight_start":36,"highlight_end":58}],"label":"the trait `_embedded_hal_blocking_i2c_Write` is not implemented for `I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":873,"byte_end":889,"line_start":39,"line_end":39,"column_start":19,"column_end":35,"is_primary":false,"text":[{"text":"    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), &mut delay)","highlight_start":19,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `_embedded_hal_blocking_i2c_Write` is implemented for `I2c<I2C, SCLPIN, SDAPIN>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `HD44780::<I2CBus<I2C>>::new_i2c`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/lib.rs","byte_start":4559,"byte_end":4566,"line_start":154,"line_end":154,"column_start":12,"column_end":19,"is_primary":false,"text":[{"text":"    pub fn new_i2c<D: DelayUs<u16> + DelayMs<u8>>(","highlight_start":12,"highlight_end":19}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/lib.rs","byte_start":4012,"byte_end":4022,"line_start":144,"line_end":144,"column_start":11,"column_end":21,"is_primary":true,"text":[{"text":"impl<I2C: i2c::Write> HD44780<I2CBus<I2C>> {","highlight_start":11,"highlight_end":21}],"label":"required by this bound in `HD44780::<I2CBus<I2C>>::new_i2c`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/lcd16x2i2c/target/thumbv6m-none-eabi/release/deps/lcd16x2i2c-b1b7125c1a4bf307.long-type-551339823290572441.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, ...>>: _embedded_hal_blocking_i2c_Write` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:39:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), &mut delay)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `_embedded_hal_blocking_i2c_Write` is not implemented for `I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `_embedded_hal_blocking_i2c_Write` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mI2c<I2C, SCLPIN, SDAPIN>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `HD44780::<I2CBus<I2C>>::new_i2c`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/lib.rs:144:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<I2C: i2c::Write> HD44780<I2CBus<I2C>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `HD44780::<I2CBus<I2C>>::new_i2c`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_i2c<D: DelayUs<u16> + DelayMs<u8>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/lcd16x2i2c/target/thumbv6m-none-eabi/release/deps/lcd16x2i2c-b1b7125c1a4bf307.long-type-551339823290572441.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function takes 3 arguments but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":914,"byte_end":924,"line_start":39,"line_end":39,"column_start":60,"column_end":70,"is_primary":false,"text":[{"text":"    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), &mut delay)","highlight_start":60,"highlight_end":70}],"label":"argument #2 of type `u8` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":873,"byte_end":889,"line_start":39,"line_end":39,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), &mut delay)","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/lib.rs","byte_start":4559,"byte_end":4566,"line_start":154,"line_end":154,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"    pub fn new_i2c<D: DelayUs<u16> + DelayMs<u8>>(","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":889,"byte_end":925,"line_start":39,"line_end":39,"column_start":35,"column_end":71,"is_primary":true,"text":[{"text":"    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), &mut delay)","highlight_start":35,"highlight_end":71}],"label":null,"suggested_replacement":"(I2CBus::new(i2c, 0x27), /* u8 */, &mut delay)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 3 arguments but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:39:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), &mut delay)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #2 of type `u8` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/lib.rs:154:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_i2c<D: DelayUs<u16> + DelayMs<u8>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), \u001b[0m\u001b[0m\u001b[38;5;10m/* u8 */, \u001b[0m\u001b[0m&mut delay)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, ...>>: _embedded_hal_blocking_i2c_Write` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":873,"byte_end":925,"line_start":39,"line_end":39,"column_start":19,"column_end":71,"is_primary":true,"text":[{"text":"    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), &mut delay)","highlight_start":19,"highlight_end":71}],"label":"the trait `_embedded_hal_blocking_i2c_Write` is not implemented for `I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `_embedded_hal_blocking_i2c_Write` is implemented for `I2c<I2C, SCLPIN, SDAPIN>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `I2CBus`","code":null,"level":"note","spans":[{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/bus/i2c.rs","byte_start":162,"byte_end":167,"line_start":6,"line_end":6,"column_start":24,"column_end":29,"is_primary":true,"text":[{"text":"pub struct I2CBus<I2C: Write> {","highlight_start":24,"highlight_end":29}],"label":"required by this bound in `I2CBus`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/lcd16x2i2c/target/thumbv6m-none-eabi/release/deps/lcd16x2i2c-b1b7125c1a4bf307.long-type-551339823290572441.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, ...>>: _embedded_hal_blocking_i2c_Write` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:39:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut lcd = HD44780::new_i2c(I2CBus::new(i2c, 0x27), &mut delay)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `_embedded_hal_blocking_i2c_Write` is not implemented for `I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `_embedded_hal_blocking_i2c_Write` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mI2c<I2C, SCLPIN, SDAPIN>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `I2CBus`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/bus/i2c.rs:6:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct I2CBus<I2C: Write> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `I2CBus`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/hnt/Desktop/rust_embedded/stm32f072b/lcd16x2i2c/target/thumbv6m-none-eabi/release/deps/lcd16x2i2c-b1b7125c1a4bf307.long-type-551339823290572441.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `reset` exists for struct `HD44780<I2CBus<I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":971,"byte_end":976,"line_start":42,"line_end":42,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    lcd.reset(&mut delay).unwrap();","highlight_start":9,"highlight_end":14}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/bus/i2c.rs","byte_start":139,"byte_end":168,"line_start":6,"line_end":6,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct I2CBus<I2C: Write> {","highlight_start":1,"highlight_end":30}],"label":"doesn't satisfy `_: DataBus` or `_: _embedded_hal_blocking_i2c_Write`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>: _embedded_hal_blocking_i2c_Write`\nwhich is required by `I2CBus<I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>>: DataBus`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `reset` exists for struct `HD44780<I2CBus<I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:42:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    lcd.reset(&mut delay).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/bus/i2c.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct I2CBus<I2C: Write> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: DataBus` or `_: _embedded_hal_blocking_i2c_Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>: _embedded_hal_blocking_i2c_Write`\u001b[0m\n\u001b[0m           which is required by `I2CBus<I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>>: DataBus`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `clear` exists for struct `HD44780<I2CBus<I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1007,"byte_end":1012,"line_start":43,"line_end":43,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    lcd.clear(&mut delay).unwrap();","highlight_start":9,"highlight_end":14}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/bus/i2c.rs","byte_start":139,"byte_end":168,"line_start":6,"line_end":6,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct I2CBus<I2C: Write> {","highlight_start":1,"highlight_end":30}],"label":"doesn't satisfy `_: DataBus` or `_: _embedded_hal_blocking_i2c_Write`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>: _embedded_hal_blocking_i2c_Write`\nwhich is required by `I2CBus<I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>>: DataBus`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `clear` exists for struct `HD44780<I2CBus<I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:43:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    lcd.clear(&mut delay).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/bus/i2c.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct I2CBus<I2C: Write> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: DataBus` or `_: _embedded_hal_blocking_i2c_Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>: _embedded_hal_blocking_i2c_Write`\u001b[0m\n\u001b[0m           which is required by `I2CBus<I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>>: DataBus`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `write_str` exists for struct `HD44780<I2CBus<I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1043,"byte_end":1052,"line_start":44,"line_end":44,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    lcd.write_str(\"Hello, Rust!\").unwrap();","highlight_start":9,"highlight_end":18}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/bus/i2c.rs","byte_start":139,"byte_end":168,"line_start":6,"line_end":6,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct I2CBus<I2C: Write> {","highlight_start":1,"highlight_end":30}],"label":"doesn't satisfy `_: DataBus` or `_: _embedded_hal_blocking_i2c_Write`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>: _embedded_hal_blocking_i2c_Write`\nwhich is required by `I2CBus<I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>>: DataBus`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `write_str` exists for struct `HD44780<I2CBus<I2CBus<I2c<I2C1, PB6<Alternate<AF1>>, PB7<Alternate<AF1>>>>>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:44:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    lcd.write_str(\"Hello, Rust!\").unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hnt/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hd44780-driver-0.4.0/src/bus/i2c.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct I2CBus<I2C: Write> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: DataBus` or `_: _embedded_hal_blocking_i2c_Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>: _embedded_hal_blocking_i2c_Write`\u001b[0m\n\u001b[0m           which is required by `I2CBus<I2CBus<I2c<stm32f0xx_hal::pac::I2C1, stm32f0xx_hal::gpio::gpiob::PB6<Alternate<stm32f0xx_hal::gpio::AF1>>, stm32f0xx_hal::gpio::gpiob::PB7<Alternate<stm32f0xx_hal::gpio::AF1>>>>>: DataBus`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 10 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 10 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0277, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
